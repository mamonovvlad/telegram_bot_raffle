const {Markup, Scenes} = require('telegraf')
let dateChange;
let description;

class SceneGenerator {
  
  //–û–ø–∏—Å–∞–Ω–∏–µ
  GenTextScene() {
    const text = new Scenes.BaseScene('text')
    text.enter((ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.from.first_name ? ctx.from.first_name : '–ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}, —è one_chance_bot –∏ —è –º–æ–≥—É –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –í–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø —É—á–∞—Å—Ç–≤—É—é" –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –í–∞–º–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.\n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–æ–∑—ã–≥—Ä–∞—à–∞ –Ω–∏–∂–µ`))
    text.on('message', async (ctx) => {
      description = ctx.message.text;
      
      if (description.length > 0 && description) {
        await ctx.scene.enter('timer')
      }
      
    })
    return {text, description}
  }
  
  //–í—Ä–µ–º—è
  GenDateScene() {
    const timer = new Scenes.BaseScene('timer')
    timer.enter(async (ctx) => {
      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ‚è∞\n–í—ã—Å—Ç–∞–≤–ª—è—Ç—å –≤—Ä–µ–º—è –ø–æ –ö–∏–µ–≤—É\n12/31/2000 10:00:00")
    })
    timer.on('text', async (ctx) => {
      dateChange = ctx.message.text;
      if (Date.parse(dateChange) && dateChange.length === 19) {
        await ctx.scene.enter('buttons')
      } else {
        ctx.reply('–û—à–∏–±–∫–∞')
      }
      
    })
    
    return {timer, dateChange}
  }
  
  //–ö–Ω–æ–ø–∫–∏
  GenPublishScene() {
    const buttons = new Scenes.BaseScene('buttons')
    buttons.enter(async (ctx) => {
      await ctx.reply('–†–æ–∑—ã–≥—Ä—ã—à –≥–æ—Ç–æ–≤ ü•≥',
        Markup.inlineKeyboard([
          [
            Markup.button.callback('–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', 'btn--publish')
          ]
        ]))
      
    })
    
    return buttons
  }
}

module.exports = SceneGenerator
